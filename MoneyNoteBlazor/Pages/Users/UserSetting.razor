@page "/users/usersetting"
@using MoneyNoteLibrary5.ViewModels;
@using MoneyNoteLibrary5.Models;
@using MoneyNoteLibrary5.Enums;
@using MoneyNoteBlazor.Components;
@inject IJSRuntime JS;

<h3>사용자 설정</h3>

<ModalAlert @ref="ClearModal" ConfirmEvent="ClearUserData" Title="초기화" Body="초기화 하시겠습니까?"></ModalAlert>

<ModalAlert @ref="DeleteModal" ConfirmEvent="DeleteUser" Title="탈퇴" Body="정말로 회원 탈퇴 하시겠습니까?"></ModalAlert>

<div class="row">
    <div class="col">
        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
            <button type="button" class="btn btn-danger" @onclick="() => DeleteModal.Open()">삭제</button>
            <button type="button" class="btn btn-warning" @onclick="() => ClearModal.Open()">초기화</button>
            <button type="button" class="btn" @onclick="ToggleChangePassword">@ChangePasswordButtonText</button>
        </div>
    </div>
</div>


<template style="@ChangePasswordHtmlStyle">

    <div class="row">
        <label class="col-4 col-lg-2 col-form-label">이전 비밀번호</label>
        <div class="col-8 col-lg-10">
            <input type="password" class="form-control" />
        </div>
    </div>

    <div class="row">
        <label class="col-4 col-lg-2 col-form-label">새로운 비밀번호</label>
        <div class="col-8 col-lg-10">
            <input type="password" class="form-control" />
        </div>
    </div>

    <div class="row">
        <label class="col-4 col-lg-2 col-form-label">새로운 비밀번호 확인</label>
        <div class="col-8 col-lg-10">
            <input type="password" class="form-control" />
        </div>
    </div>


    <div class="row">
        <div class="col-lg-6 col-md-12 col-sm-12 mx-auto text-center">
            <div class="row">
                <div class="d-grid gap-0 col">
                    <button class="btn btn-primary" type="button" @onclick="ChangePassword" disabled="@(ViewModel.IsRunProgressRing)">
                        @if (ViewModel.IsRunProgressRing)
                        {
                            <ProgressSpiner />
                        }
                        저장
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>


@code {

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public SettingViewModel ViewModel { get; set; }

    private ModalAlert DeleteModal { get; set; }

    private ModalAlert ClearModal { get; set; }

    public bool isOpenChangePassword { get; set; }

    public string ChangePasswordButtonText => isOpenChangePassword ? "변경창 닫기" : "비밀번호 변경";

    public string ChangePasswordHtmlStyle => isOpenChangePassword ? "" : "display:none;";

    protected override async Task OnInitializedAsync()
    {
        if (SharedClass.SharedUser == null)
            SharedClass.SharedUser = await SharedClass.GetUserInfo(JS);

        if (SharedClass.SharedUser == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ViewModel = new SettingViewModel();
            //ViewModel = new MainCategoryViewModel(SharedClass.SharedUser, MoneyNoteLibrary5.Enums.MoneyEnum.MoneyCategory.Expense);
            //await ViewModel.Initialize();
        }
        //return base.OnInitializedAsync();
    }

    public async Task ClearUserData()
    {
        return;
        if (SharedClass.SharedUser == null)
        {
            NavigationManager.NavigateTo("/");
        }

        var result = await ViewModel.ClearUserData(SharedClass.SharedUser);
        if (result)
            NavigationManager.NavigateTo("/");
    }

    public async Task DeleteUser()
    {
        return;
        if (SharedClass.SharedUser == null)
        {
            NavigationManager.NavigateTo("/");
        }

        var result = await ViewModel.ClearUserData(SharedClass.SharedUser);
        if (result)
            NavigationManager.NavigateTo("/");
    }

    public async Task ChangePassword()
    {

    }

    public void ToggleChangePassword()
    {
        isOpenChangePassword = !isOpenChangePassword;
    }
}
