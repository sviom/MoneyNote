@page "/category/categoryList"
@using MoneyNoteLibrary5.ViewModels;
@using MoneyNoteLibrary5.Models;
@using MoneyNoteLibrary5.Enums;
@inject IJSRuntime JS;

@if (ViewModel == null)
{
    <p>가져오는 중...</p>
}
else
{
    <div class="row">
        <div class="col-lg-3 col form-check">
            <input type="radio" id="expenseRadio" name="categoryDivision" value="expense" class="form-check-input"
                   checked="@(ViewModel.Division == MoneyEnum.MoneyCategory.Expense)"
                   @onchange="GetMainCategoryWithType" />
            <label class="form-check-label" for="expenseRadio">지출</label>
        </div>
        <div class="col-lg-3 col form-check">
            <input type="radio" id="incomeRadio" name="categoryDivision" value="income" class="form-check-input"
                   checked="@(ViewModel.Division == MoneyEnum.MoneyCategory.Income)"
                   @onchange="GetMainCategoryWithType" />
            <label class="form-check-label" for="incomeRadio">수입</label>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6 col">
            <div class="row">
                <div class="col">
                    <h4>상위 카테고리</h4>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>순번</th>
                                <th>내용</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < ViewModel.MainCategories.Count; i++)
                            {
                                var item = ViewModel.MainCategories[i];

                                <tr>
                                    <td>
                                        @(i+1)
                                    </td>
                                    <td @onclick="e=> GetSubCategories(e, item)">
                                        <div class="row">
                                            <div class="d-grid gap-0 col-lg-8 col">
                                                <input type="text" class="form-control" value="@item.Title" readonly="@(IsNotEqualSelectedItemTitle(item) ? true : false)" />
                                            </div>
                                            <div class="d-grid gap-0 col-lg-2 col">
                                                <button type="button" class="btn btn-secondary d-block" @onclick="e=> UpdateMainCategory(e, item)">
                                                    @(IsNotEqualSelectedItemTitle(item) ? "🛠" : "💾")
                                                </button>
                                            </div>
                                            <div class="d-grid gap-0 col-lg-2 col">
                                                <button type="button" class="btn btn-danger d-block">🗑</button>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" />
                    <button type="button">추가</button>
                </div>
            </div>

        </div>
        <div class="col-lg-6 col">
            <div class="row">
                <div class="col">
                    <h4>하위 카테고리</h4>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>순번</th>
                                <th>내용</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < ViewModel.SubCategories.Count; i++)
                            {
                                var item = ViewModel.SubCategories[i];

                                <tr>
                                    <td>
                                        @(i+1)
                                    </td>
                                    <td>
                                        <input type="text" class="form-control" value="@item.Title" />
                                        <button type="button" class="btn">수정</button>
                                        <button type="button" class="btn btn-danger">삭제</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" />
                    <button type="button">추가</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public MainCategoryViewModel ViewModel { get; set; }

    public bool IsNotEqualSelectedItemTitle(ICategory item)
    {
        return ViewModel.SelectedCategory.Title != item.Title;
    }

    protected override async Task OnInitializedAsync()
    {
        if (SharedClass.SharedUser == null)
            SharedClass.SharedUser = await SharedClass.GetUserInfo(JS);

        if (SharedClass.SharedUser != null)
        {
            ViewModel = new MainCategoryViewModel(SharedClass.SharedUser, MoneyNoteLibrary5.Enums.MoneyEnum.MoneyCategory.Expense);
            await ViewModel.Initialize();
        }
        //return base.OnInitializedAsync();
    }

    public async Task GetSubCategories(EventArgs e, MainCategory item)
    {
        await ViewModel?.GetSubCategory(item);
    }

    public async Task GetMainCategoryWithType(ChangeEventArgs e)
    {
        if (ViewModel == null)
            return;

        var valueString = e.Value.ToString();
        switch (valueString)
        {
            case "income":
                ViewModel.Division = MoneyEnum.MoneyCategory.Income;
                break;
            case "expense":
                ViewModel.Division = MoneyEnum.MoneyCategory.Expense;
                break;
            default:
                return;
        }

        await ViewModel?.Initialize();
    }

    public async Task UpdateMainCategory(EventArgs e, MainCategory item)
    {
        if (ViewModel == null)
            return;

        if (!IsNotEqualSelectedItemTitle(item))
        {
            await ViewModel?.UpdateCategory();
            return;
        }

        ViewModel.SelectedCategory = item;
    }
}
