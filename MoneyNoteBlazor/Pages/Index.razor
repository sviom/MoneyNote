@layout EmptyLayout
@page "/"
@using MoneyNoteLibrary5.ViewModels;
@using MoneyNoteLibrary5.Models;
@using System.Threading;
@inject IJSRuntime JS;


<main class="form-signin">
    <form>
        <img class="mb-4" src="/images/bootstrap-logo.svg" alt="" width="72" height="57">
        <h1 class="h3 mb-3 fw-normal">MoneyNote에 <br />로그인해주세요.</h1>

        <div class="form-floating">
            <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com" @bind="ViewModel.Email">
            <label for="floatingInput">Email address</label>
        </div>
        <div class="form-floating">
            <input type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind="ViewModel.Password" @onkeypress="PasswordOnKeyPress">
            <label for="floatingPassword">Password</label>
        </div>

        <div class="checkbox mb-3">
            <label>
                @*<input type="checkbox" value="remember-me"> Remember me*@
                <input type="checkbox" @bind-value="IsContainLogin" name="isContainLogin" /> 로그인 유지
            </label>
        </div>
        <button class="w-100 btn btn-lg btn-primary" type="button" @onclick="Login">Sign in</button>
        @*<button class="w-100 btn btn-lg btn-secondary" type="button">Sign Up</button>*@
        <a href="/Users/SignUp" class="btn btn-link">Sign Up</a>
        <p class="mt-5 mb-3 text-muted">&copy; 2017–@DateTime.Now.Year</p>
    </form>
</main>

<style>
    html,
    body {
        height: 100%;
    }

    body {
        /*display: flex;*/
        align-items: center;
        padding-top: 40px;
        padding-bottom: 40px;
        background-color: #f5f5f5;
    }

    .form-signin {
        width: 100%;
        max-width: 330px;
        padding: 15px;
        margin: auto;
    }

        .form-signin .checkbox {
            font-weight: 400;
        }

        .form-signin .form-floating:focus-within {
            z-index: 2;
        }

        .form-signin input[type="email"] {
            margin-bottom: -1px;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }

        .form-signin input[type="password"] {
            margin-bottom: 10px;
            border-top-left-radius: 0;
            border-top-right-radius: 0;
        }
</style>


@code
{
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public LoginViewModel ViewModel { get; set; } = new LoginViewModel();

    public bool IsContainLogin { get; set; }

    protected override async Task OnInitializedAsync()
    {
#if DEBUG
    await Task.Delay(1000);
#endif

        var result = await SharedClass.GetItemInLocalStorage<string>(JS, SharedClass.Keys.KeepLogin);
        bool.TryParse(result, out bool result22);
        if (result22)
        {
            var userInfo = await SharedClass.GetItemInLocalStorage<string>(JS, SharedClass.Keys.userKey);
            if (userInfo == "'null'" || userInfo == null)
                return;

            var user = JsonConvert.DeserializeObject<MoneyNoteLibrary5.Models.User>(userInfo);


            if (user.Id != Guid.Empty)
                NavigationManager?.NavigateTo("/Money/MoneyList");
        }
        else
        {
            // delete user key
            await SharedClass.SetItemInLocallStorage(JS, SharedClass.Keys.userKey, null);
        }
    }


    private async Task Login()
    {
        if (!ViewModel.IsEnableLogin)
            return;

        var result = await ViewModel.LogIn();
        if (result.Item1)
        {
            SharedClass.SharedUser = result.Item2;
            //var saveResult = await JS.InvokeAsync<bool>("SetUserInfo", JsonConvert.SerializeObject(result.Item2));
            await SharedClass.SetItemInLocallStorage(JS, SharedClass.Keys.userKey, result.Item2);

            if (IsContainLogin)
            {
                await SharedClass.SetItemInLocallStorage(JS, SharedClass.Keys.KeepLogin, true);
            }


            NavigationManager?.NavigateTo("/Money/MoneyList");
        }
    }

    public async Task PasswordOnKeyPress(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            await Login();
        }
    }
}