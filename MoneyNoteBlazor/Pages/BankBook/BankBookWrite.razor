@page "/bankbook/bankbookwrite/{bankBookGuid:guid?}"
@using MoneyNoteLibrary5.ViewModels;
@using MoneyNoteLibrary5.Models;
@inject IJSRuntime JS;

@if (ViewModel == null)
{
    <h2>가져오는 중...</h2>
}
else
{
    <div class="row">
        <div class="col justify-content-around">
            <NavLink class="btn btn-info" href="/BankBook/BankBookList">뒤로가기</NavLink>
        </div>
    </div>

    <main>
        <div class="text-center">
            @*<img class="d-block mx-auto mb-4" src="../assets/brand/bootstrap-logo.svg" alt="" width="72" height="57">*@
            <h2>자산 내역 작성</h2>
            <p class="lead">자산 내역을 작성합니다.</p>
        </div>
    </main>

    <div class="row">
        <label class="col-4 col-lg-2  col-form-label">제목</label>
        <div class="col-8 col-lg-10">
            <input type="text" class="form-control" @bind="ViewModel.Name" />
        </div>
    </div>

    <div class="row">
        <label class="col-4 col-lg-2  col-form-label">금액</label>
        <div class="col-8 col-lg-10">
            <input type="number" class="form-control" @bind="ViewModel.AssetsText" />
        </div>
    </div>

    <div class="row">
        <div class="col col-lg-6 mx-auto text-center">
            <div class="row">

            </div>

            <div class="row">
                <div class="d-grid gap-0 col-6">
                    <button @onclick="SaveBankBook" class="btn btn-primary d-block" type="button" disabled="@(!ViewModel.IsEnableSave)">저장</button>
                </div>
                @if (ViewModel.IsShowDeleteButton)
                {
                    <div class="d-grid gap-0 col-6">
                        <button class="btn btn-danger d-block" type="button" @onclick="DeleteBankBook">삭제</button>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {

    public BankBookViewModel ViewModel { get; set; }

    public BankBook SelectedBankBook => ViewModel?.SelectedItem;

    [Parameter]
    public Guid bankBookGuid { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public string BankBookListLink => "/BankBook/BankBookList";

    protected override async Task OnInitializedAsync()
    {
        if (SharedClass.SharedUser == null)
            SharedClass.SharedUser = await SharedClass.GetUserInfo(JS);

        if (SharedClass.SharedUser != null)
        {
            ViewModel = new BankBookViewModel(SharedClass.SharedUser);
            await ViewModel.GetBankBooks();
            if (bankBookGuid != Guid.Empty)
                ViewModel.SelectedBankBookId = bankBookGuid;

            ViewModel.SetSelectedItem();
        }
        //return base.OnInitializedAsync();
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    return base.OnParametersSetAsync();
    //}

    public async Task SaveBankBook(EventArgs e)
    {
        var result = await ViewModel.SaveBankBook();
        if (result)
            NavigationManager?.NavigateTo(BankBookListLink);
    }


    public async Task DeleteBankBook(EventArgs e)
    {
        var result = await ViewModel.DeleteBankBook();
        if (result)
            NavigationManager?.NavigateTo(BankBookListLink);
    }
}

<style>
    .row {
        padding-top: 10px;
    }
</style>