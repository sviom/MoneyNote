@page "/money/moneywrite/{MoneyItemGuid:guid?}"
@using MoneyNoteLibrary5.ViewModels;
@using MoneyNoteLibrary5.Models;
@inject IJSRuntime JS;

<h3>MoneyWrite</h3>
@if (ViewModel == null || ViewModel.IsRunProgressRing)
{
    <h2>가져오는 중...</h2>
}
else
{
    <main>
        <div class="py-5 text-center">
            <img class="d-block mx-auto mb-4" src="../assets/brand/bootstrap-logo.svg" alt="" width="72" height="57">
            <h2>@(@ViewModel.IsExpense ? "지출" : "수입") 작성</h2>
            <p class="lead">Below is an example form built entirely with Bootstrap’s form controls. Each required form group has a validation state that can be triggered by attempting to submit the form without completing it.</p>
        </div>
    </main>

    <div class="row">
        <input type="radio" name="isIncomeRadio" value="expense" class="form-control"
               checked="@ViewModel.IsExpense" @onchange="DivisionChanged" />
        <label>지출</label>
        <input type="radio" name="isIncomeRadio" value="income" class="form-control"
               checked="@ViewModel.IsIncome" @onchange="DivisionChanged" />
        <label>수입</label>
    </div>
    <div class="row">
        <select value="@ViewModel.SelectedBankBookId" @onchange="SetBankBook">
            @foreach (var item in BankBookViewModel.BankBooks)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>
    <div class="row">
        <label>제목</label>
        <input type="text" @bind="ViewModel.Title" />
    </div>

    <div class="row">
        <label>금액</label>
        <input type="number" @bind="ViewModel.MoneyText" />
    </div>

    <div class="row">
        <label>설명</label>
        <input type="text" @bind="ViewModel.Description" />
    </div>

    <div class="row">
        <select class="form-select" value="@ViewModel.MainCategoryId" @onchange="GetSubCategories">
            @foreach (var item in ViewModel.MainCategories)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </select>
    </div>

    <div class="row">
        <select class="form-select" @bind="ViewModel.SubCategoryId">
            @foreach (var item in ViewModel.SubCategories)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </select>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-12 col-sm-12 mx-auto text-center">
            @if (ViewModel.IsModifyMode)
            {
                <div class="row">
                    <div class="d-grid gap-0 col-6">
                        <button class="btn btn-primary d-block" type="button" @onclick="ModifyMoney">수정</button>
                    </div>
                    <div class="d-grid gap-0 col-6">
                        <button class="btn btn-danger d-block" type="button" @onclick="DeleteMoney">삭제</button>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="d-grid gap-0 col">
                        <button class="btn btn-primary" @onclick="e => SaveMoney(e)" disabled="@(!ViewModel.IsEnableSave)">저장</button>
                    </div>
                </div>
            }
        </div>

    </div>
}


@code {
    public MoneyHandleViewModel ViewModel { get; set; }

    public BankBookViewModel BankBookViewModel { get; set; }

    [Parameter]
    public Guid MoneyItemGuid { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SharedClass.SharedUser == null)
            SharedClass.SharedUser = await SharedClass.GetUserInfo(JS);

        if (SharedClass.SharedUser != null)
        {
            BankBookViewModel = new BankBookViewModel(SharedClass.SharedUser);
            ViewModel = new MoneyHandleViewModel(SharedClass.SharedUser);
            ViewModel.RefViewModel = BankBookViewModel;
            await ViewModel.CategoryInitialize();
            await BankBookViewModel.GetBankBooks();
        }
        //return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ViewModel != null && MoneyItemGuid != Guid.Empty)
            await ViewModel.SetViewModel(MoneyItemGuid);
        //return base.OnParametersSetAsync();
    }

    public async Task GetSubCategories(ChangeEventArgs e)
    {
        ViewModel.MainCategoryId = new Guid(e.Value.ToString());
        await ViewModel.GetSubCategories();
    }

    public async Task SaveMoney(EventArgs e)
    {
        await ViewModel.SaveMoney();
    }

    public async Task ModifyMoney(EventArgs e)
    {
        var result = await ViewModel.ModifyMoney();
        if (result)
            NavigationManager?.NavigateTo("/Money/MoneyList");
    }

    public async Task DeleteMoney(EventArgs e)
    {
        var result = await ViewModel.DeleteMoney();
        if (result)
            NavigationManager?.NavigateTo("/Money/MoneyList");
    }

    public void SetBankBook(ChangeEventArgs e)
    {
        BankBookViewModel.SelectedBankBookId = new Guid(e.Value.ToString());

        ViewModel.SelectedBankBook = BankBookViewModel.SelectedItem;
    }

    public async Task DivisionChanged(ChangeEventArgs e)
    {
        if (ViewModel == null)
            return;

        var valueString = e.Value.ToString();
        switch (valueString)
        {
            case "income":
                ViewModel.IsIncome = true;
                ViewModel.IsExpense = false;
                break;
            case "expense":
                ViewModel.IsIncome = false;
                ViewModel.IsExpense = true;
                break;
            default:
                return;
        }

        await ViewModel.GetMainCategories();
    }
}
