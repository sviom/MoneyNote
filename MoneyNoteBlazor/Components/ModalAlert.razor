<div class="modal fade @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay"
     data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => Close()"></button>
            </div>
            <div class="modal-body">
                @Body
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => Close()">취소</button>
                <button type="button" class="btn btn-primary" @onclick="e => Confirm(e)">예, 확인했습니다</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback<bool> ConfirmEvent { get; set; }

    [Parameter]
    public EventCallback<bool> CloseEvent { get; set; }

    [Parameter]
    public string Title { get; set; } = "제목";

    [Parameter]
    public string Body { get; set; } = "내용";

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public async Task Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        await CloseEvent.InvokeAsync(true);
    }

    public async Task Confirm(EventArgs e)
    {
        await ConfirmEvent.InvokeAsync(true);
        await Close();
    }

}